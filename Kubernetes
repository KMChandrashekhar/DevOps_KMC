
--------------------------------------------------------------------------------------------------------------
Kubernetes
--------------------------------------------------------------------------------------------------------------
09-10-25 - class 1
--------------------------------------------------------------------------------------------------------------
Installation

K8S Master - t2.medium
K8S Workers - t2.micro

kubeadm token create --print-join-command --> To create a new join command

kubectl get nodes --> To list all the nodes of the cluster
--------------------------------------------------------------------------------------------------------------
Pod Definition/Manifest File:

apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  containers:
  -  name: nginx-container
     image: nginx
     ports:
     - containerPort: 80
--------------------------------------------------------------------------------------------------------------
Commands:
kubectl run <pod-name> --image <image> --> To create a pod with CLI

kubectl apply -f <manifest-path>.yaml --> To apply a kubernetes manifest

kubectl get pods --> To list the pods
kubectl get pods -o wide --> To list the pods with more information

kubectl delete <object-kind> <object-name> --> To delete a kubernetes resource

kubectl describe <object-kind> <object-name> --> To see more information about a kubernetes resource
--------------------------------------------------------------------------------------------------------------
Manifest File Fields:

1. apiVersion:

Ex: v1, apps/v1, storage.k8s.io/v1

kubectl api-versions --> To list all the api-versions in Kubernetes

2. kind:

Ex: Pod, Deployment, Service, ClusterRole etc

kubectl api-resources --> To list all the resources/objects that can be created in Kubernetes

3. metadata:

4. labels:

Ex:

labels:
  app: nginx
  type: lb

5. selectors:

Types of Selectors:

a. Equity Based Selectors

Operators Used here: =, !=, ==

Commands:

kubectl get pods -l app=nginx
kubectl get pods -l app!=nginx

b. Set Based Selectors

Operators Used: In, NotIn, Exists

Example:

app in (nginx)
app in (nginx,proxy)
app notin (nginx)
app exists

6. Spec:
--------------------------------------------------------------------------------------------------------------
Controller Types:

1. ReplicaSet/ReplicationController:

Difference Between ReplicaSet and ReplicationController:


Manifest:

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: nginx-repset
  labels:
    app: nginx
spec:
  replicas: 5
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      name: nginx
      labels: 
        app: nginx
    spec:
      containers:
      - name: nginx-container
        image: nginx
        ports:
        - containerPort: 80

Commands:

kubectl scale replicaset <replicaset-name> --replicas <number-of-pods> --> To scale the pods of replica set

kubectl edit <object-kind> <object-name> --> To edit an existing kubernetes object
-----------------------------------------------------------------------------------------------------------------
2. Deployment Controller:

Manifest:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deploy
  labels:
    app: nginx
spec:
  replicas: 4
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      name: nginx
      labels: 
        app: nginx
    spec:
      containers:
      - name: nginx-container
        image: nginx
        ports:
        - containerPort: 80

Commands:

kubectl set image deploy <deployment-name> <container-name>=<image> --> To update the image of deployment controller

kubectl rollout history deploy <deployment-name> --> To check the history of the deployment controller

kubectl rollout undo deploy <deployment-name> --> To rollback to one previous version
kubectl rollout undo deploy <deployment-name> --to-revision=<revision-number> --> To rollback to a particular revision
--------------------------------------------------------------------------------------------------------------------------
3. DaemonSet

Manifest:

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nginx-ds
  labels:
    app: nginx
spec:
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      name: nginx
      labels: 
        app: nginx
    spec:
      containers:
      - name: nginx-container
        image: nginx
        ports:
        - containerPort: 80

Typical Use Cases of DaemonSet:

1. Monitoring Exporters: Prometheus, Node Exporter
2. Log Collection Agents: Logstash, Fluentd
3. Security Threat Monitoring: Falco
--------------------------------------------------------------------------------------------------------------

Labels : Labels are key value pairs used for grouping and selecting Kubernetes objects.

Selectors : Selectors are used to identify the Kubernetes objects using their labels.
      
types of selectors

1. Equity Based Selectors: these are used to identify objects by key and an exact value. operators are used here equal to, not equal to | = != ==

2. set based selectors: these are used to identify the Kubernetes objects by keys based on the set of values, operators are used In, NotIn, Exists

3. Spec : This section is used to define the configuration of the kubernetes object


1. Replicaset/ReplicationController: Replica set or replicationa controller are used to ensure the specified number of identical PODs are always running in cluster to achieve load balancing and high availability. if any pod goes down or is deleted manually this controller immediately creates a new pod to replica set.

Difference between replica set and replicationcontroller : Both replica set and replication controller are used to create multiple identical replicas of PODs however replica set is the new and most advanced version while the replication controller is older and now is deprecated.

Replication controller also only supports equity based while the replica sets supports both equity based and set based. 

2. Deployment Controller: This controller is the most common object in kubernetes used for deploying and managing application workloads.deployment controller works as a higher layer that manages PODs through replica Sets. the main purpose of a deployment controller is to manage the creation scaling and rolling updates of the PODs without breaking the user experience.

3. Daemonset : This controller in kubernetes ensures that a specific PODs runs on every node in cluster, if a new node is added to the cluster the daemon set automatiocally adds a POD to the new node similarly when nodes are removed from the cluster the PODs are also cleaned up automatically. 

Use Cases: Monitoring Exporters like Prometeous, Node Exporter
 Log Collection agents : logstash, FluentD
 security threat monitroing 

